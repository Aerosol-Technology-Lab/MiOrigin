{"version":3,"sources":["BLE_Handler.js","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["resolution","BLE_notification","a","Promise","resolve","reject","triggerNotification","console","log","waitForNotification","getPromise","SERVICE_UUID","window","App","useState","device","setDevice","server","setServer","service","setService","characteristic","setCharacteristic","number","setnumber","connectToDevice","navigator","bluetooth","requestDevice","filters","services","pDevice","gatt","connect","pServer","getPrimaryService","pService","getCharacteristic","pCharacteristic","disconnectToDevice","disconnect","startCounter","n","useEffect","bleNotify","showFile","input","reader","FileReader","filePromise","onload","event","target","result","onerror","err","readAsArrayBuffer","files","fileResult","className","onClick","buffer","Uint8Array","Uint16Array","response","writeValueWithResponse","type","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb764088.chunk.js","sourcesContent":["\nvar awaitingSystem = \"piiza\";\n\nvar BLE_notification = null;\nvar resolution;\nvar failure;\n\nasync function getPromise() {\n    return (\n        new Promise((resolve, reject) => {\n            resolution = resolve;\n            failure = reject;\n            \n        })\n    );\n}\n\nfunction triggerNotification() {\n    console.log(awaitingSystem);\n    resolution();\n\n    BLE_notification = new Promise((resolve, reject) => {\n        resolution = resolve;\n        failure = reject;\n    });\n}\n\nasync function waitForNotification() {\n    await BLE_notification;\n    \n    return;\n}\n\nBLE_notification = getPromise();\n\nexport default triggerNotification;\n\nexport {\n    triggerNotification,\n    waitForNotification,\n    getPromise\n};","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport { useState ,useEffect } from 'react';\nimport './BLE_Handler';\nimport { triggerNotification, waitForNotification } from './BLE_Handler';\n\nconst SERVICE_UUID = \"9f9ece14-b513-4cdb-b0b8-9e5fa3b9fef2\";\n\nconst CHARACTERISTIC_UUID = \"f5db5ef9-c1d0-4d1b-8907-d3f2075872c5\";\nwindow.waitForNotification = waitForNotification;\nwindow.getPromise = waitForNotification;\nfunction App() {\n\n  console.log(\"Start app\");  \n  \n  const [device, setDevice] = useState(null);\n  const [server, setServer] = useState(null);\n  const [service, setService] = useState(null);\n  const [characteristic, setCharacteristic] = useState(null);\n\n  const [number, setnumber] = useState(0)\n  \n  const connectToDevice = async () => {\n    if (device === null) {\n      console.log(\"Requesting\");\n      let pDevice = await navigator.bluetooth.requestDevice({filters: [{services: [SERVICE_UUID]}]});\n      let pServer = await pDevice.gatt.connect();\n      let pService = await pServer.getPrimaryService(SERVICE_UUID);\n      let pCharacteristic = await pService.getCharacteristic(CHARACTERISTIC_UUID);\n      // setDevice(await navigator.bluetooth.requestDevice({filters: [{services: [SERVICE_UUID]}]}));\n      // setserver(await device.gatt.connect());\n\n      setDevice(pDevice);\n      setServer(pServer);\n      setService(pService);\n      setCharacteristic(pCharacteristic);\n\n      console.log(\"Here I am\");\n    }\n    else {\n      console.log(\"Device is initialized. Nothing to do.\");\n    }\n    \n    window.device = device;\n    window.server = server;\n    window.service = service;\n    window.characteristic = characteristic;\n    console.log('Howdy!')\n  };\n\n  const disconnectToDevice = async() => {\n    if (device !== null) {\n      server.disconnect();\n      setDevice(null);\n      setServer(null);\n      setService(null);\n      setCharacteristic(null);\n    }\n  };\n  \n  const sendMTURequest = () => {\n    if (device !== null) {\n      let buffer = new Uint8Array(6);\n      let props = new Uint16Array(1);\n      buffer[2] = 0x0D;\n      buffer[3] = 0x01;\n\n      window.response = characteristic.writeValueWithResponse(buffer);\n    }\n  };\n\n  const startCounter = async () => {\n    var n = number;\n    \n    while (true) {\n      console.log(n);\n      n += 1;\n      await waitForNotification();\n      setnumber(n);\n      console.log(\"Print!\");\n    }\n  }\n  \n  useEffect(() => {\n    // effect\n    window.device = device;\n\n    window.bleNotify = null;\n\n    startCounter();\n    \n    return () => {\n      delete window.device;\n      // cleanup\n    }\n  }, [])\n  \n  const showFile = async (input) => {\n    console.log (\"I am here!\");\n    const reader = new FileReader();\n\n    const filePromise = new Promise((resolve, reject) => {\n      reader.onload = (event) => {\n        resolve(event.target.result);\n      };\n\n      reader.onerror = (err) => {\n        reject(err);\n      };\n    });\n    //https://stackoverflow.com/questions/56338154/howto-convert-file-to-byte-stream-in-javascript\n    // reader.readAsDataURL(input.target.files[0]);\n    reader.readAsArrayBuffer(input.target.files[0]);\n    window.fileResult = await filePromise;\n    // let file = input.files[0];\n  \n    // alert(`File name: ${file.name}`); // e.g my.png\n    // alert(`Last modified: ${file.lastModified}`); // e.g 1552830408824\n  }\n  \n  return (\n    <div className=\"App\">\n      <p>{number}</p>\n      <button onClick={ connectToDevice } >Connect</button>\n      <button onClick={ disconnectToDevice }>Disconnect</button>\n      <button onClick= { sendMTURequest }>Send MTU Request</button>\n      <button onClick= { triggerNotification }>Trigger</button>\n      <input type=\"file\" onChange={ showFile }></input>\n      {/* <input type=\"file\" /> */}\n      {/* <input\n          type=\"file\"\n          // value={selectedFile}\n          onChange={(e) => console.log(e)}\n        /> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}